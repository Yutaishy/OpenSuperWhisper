name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  id-token: write
  attestations: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build-${{ matrix.os }}-${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux - Using Ubuntu 20.04 for better compatibility (older glibc)
          - os: ubuntu-20.04
            arch: x64
            python-version: '3.12'
            artifact-name: linux-x64
            executable-name: OpenSuperWhisper
            
          # Windows
          - os: windows-2022
            arch: x64
            python-version: '3.12'
            artifact-name: windows-x64
            executable-name: OpenSuperWhisper
            
          # macOS - Apple Silicon
          - os: macos-14
            arch: arm64
            python-version: '3.12'
            artifact-name: macos-arm64
            executable-name: OpenSuperWhisper
            
          # macOS - Intel
          - os: macos-13
            arch: x64
            python-version: '3.12'
            artifact-name: macos-x64
            executable-name: OpenSuperWhisper

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller>=6.0
          pip install setuptools wheel
          
      # Linux specific dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libportaudio2 \
            libxcb-xinerama0 \
            libxcb-cursor0 \
            libxkbcommon-x11-0 \
            libglib2.0-0 \
            libgl1-mesa-glx \
            libegl1-mesa \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-shape0 \
            libdbus-1-3
            
      # Build executable
      - name: Build executable
        env:
          CI: true
        run: |
          python build_executable.py ${{ matrix.executable-name }}
          
      # Windows Code Signing (if certificates are available)
      - name: Sign Windows executable
        if: runner.os == 'Windows' && env.WINDOWS_CERT_BASE64 != ''
        env:
          WINDOWS_CERT_BASE64: ${{ secrets.WINDOWS_CERT_BASE64 }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
        run: |
          $cert = [System.Convert]::FromBase64String($env:WINDOWS_CERT_BASE64)
          [System.IO.File]::WriteAllBytes("cert.pfx", $cert)
          & signtool sign /f cert.pfx /p $env:WINDOWS_CERT_PASSWORD /fd sha256 /tr http://timestamp.digicert.com /td sha256 dist\${{ matrix.executable-name }}\${{ matrix.executable-name }}.exe
          Remove-Item cert.pfx
        shell: pwsh
        continue-on-error: true
          
      # macOS Code Signing and Notarization
      - name: Sign and Notarize macOS app
        if: runner.os == 'macOS' && env.APPLE_DEVELOPER_ID != ''
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Sign the app
          codesign --force --options runtime --timestamp \
            --sign "$APPLE_DEVELOPER_ID" \
            --entitlements entitlements.plist \
            dist/${{ matrix.executable-name }}.app
          
          # Create DMG for notarization
          hdiutil create -volname "${{ matrix.executable-name }}" \
            -srcfolder dist/${{ matrix.executable-name }}.app \
            -ov -format UDZO \
            dist/${{ matrix.executable-name }}.dmg
            
          # Notarize
          xcrun notarytool submit dist/${{ matrix.executable-name }}.dmg \
            --apple-id "$APPLE_DEVELOPER_ID" \
            --password "$APPLE_APP_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
            
          # Staple the notarization
          xcrun stapler staple dist/${{ matrix.executable-name }}.dmg
        continue-on-error: true
        
      # Create archives
      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        run: |
          cd dist
          7z a -tzip ${{ matrix.artifact-name }}.zip ${{ matrix.executable-name }}\*
          certutil -hashfile ${{ matrix.artifact-name }}.zip SHA256 > ${{ matrix.artifact-name }}.zip.sha256
        shell: pwsh
        
      - name: Create archive (Linux)
        if: runner.os == 'Linux'
        run: |
          cd dist
          tar -czf ${{ matrix.artifact-name }}.tar.gz ${{ matrix.executable-name }}/
          sha256sum ${{ matrix.artifact-name }}.tar.gz > ${{ matrix.artifact-name }}.tar.gz.sha256
          
      - name: Create archive (macOS)
        if: runner.os == 'macOS'
        run: |
          cd dist
          # Create both ZIP and DMG
          zip -r ${{ matrix.artifact-name }}.zip ${{ matrix.executable-name }}.app/
          sha256sum ${{ matrix.artifact-name }}.zip > ${{ matrix.artifact-name }}.zip.sha256
          if [ -f "${{ matrix.executable-name }}.dmg" ]; then
            mv ${{ matrix.executable-name }}.dmg ${{ matrix.artifact-name }}.dmg
            sha256sum ${{ matrix.artifact-name }}.dmg > ${{ matrix.artifact-name }}.dmg.sha256
          fi
          
      # Generate SBOM
      - name: Generate SBOM
        run: |
          pip install cyclonedx-bom
          cyclonedx-py -r requirements.txt -o dist/sbom-${{ matrix.artifact-name }}.json --format json
        continue-on-error: true
        
      # Build attestation
      - name: Generate build attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/${{ matrix.artifact-name }}.*'
        continue-on-error: true
          
      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            dist/${{ matrix.artifact-name }}.*
            dist/sbom-${{ matrix.artifact-name }}.json
          retention-days: 7
          
  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: false
          
      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" -o -name "*.dmg" -o -name "*.sha256" -o -name "*.json" \) -exec cp {} release-files/ \;
          ls -la release-files/
          
      - name: Generate release notes
        id: release_notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Create release notes
          cat > release-notes.md << EOF
          # OpenSuperWhisper $VERSION
          
          ## 📦 Downloads
          
          ### Windows
          - \`windows-x64.zip\` - Windows 10/11 (64-bit)
          
          ### macOS
          - \`macos-arm64.dmg\` - Apple Silicon (M1/M2/M3)
          - \`macos-x64.dmg\` - Intel Macs
          
          ### Linux
          - \`linux-x64.tar.gz\` - Ubuntu 20.04+ and compatible distributions
          
          ## 🔒 Verification
          
          Each download includes a \`.sha256\` file for verification:
          \`\`\`bash
          # Windows (PowerShell)
          certutil -hashfile windows-x64.zip SHA256
          
          # macOS/Linux
          sha256sum -c linux-x64.tar.gz.sha256
          \`\`\`
          
          ## 📋 Software Bill of Materials (SBOM)
          
          SBOM files in CycloneDX format are included for each platform:
          - \`sbom-windows-x64.json\`
          - \`sbom-macos-arm64.json\`
          - \`sbom-macos-x64.json\`
          - \`sbom-linux-x64.json\`
          
          ## ⚠️ Important Notes
          
          - **Windows**: If you see a SmartScreen warning, click "More info" → "Run anyway"
          - **macOS**: The app is notarized. If you encounter issues, right-click and select "Open"
          - **Linux**: Ensure PortAudio is installed: \`sudo apt-get install libportaudio2\`
          
          ## 📝 Changelog
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
          
          ---
          
          **Note**: The source code archives (zip/tar.gz) are automatically generated by GitHub. Their checksums may change in the future due to git version differences. For reproducible builds, use the git tag directly.
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          body_path: release-notes.md
          draft: false
          prerelease: false
          generate_release_notes: false
          
      # Discord notification
      - name: Notify Discord
        if: success() && env.DISCORD_WEBHOOK != ''
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"content\": \"🚀 **OpenSuperWhisper $VERSION Released!**\",
              \"embeds\": [{
                \"title\": \"OpenSuperWhisper $VERSION\",
                \"url\": \"https://github.com/${{ github.repository }}/releases/tag/$VERSION\",
                \"color\": 5814783,
                \"fields\": [
                  {
                    \"name\": \"📦 Downloads\",
                    \"value\": \"[Windows](https://github.com/${{ github.repository }}/releases/download/$VERSION/windows-x64.zip) | [macOS ARM](https://github.com/${{ github.repository }}/releases/download/$VERSION/macos-arm64.dmg) | [macOS Intel](https://github.com/${{ github.repository }}/releases/download/$VERSION/macos-x64.dmg) | [Linux](https://github.com/${{ github.repository }}/releases/download/$VERSION/linux-x64.tar.gz)\",
                    \"inline\": false
                  }
                ],
                \"footer\": {
                  \"text\": \"OpenSuperWhisper - Two-Stage Voice Transcription Pipeline\"
                }
              }]
            }" \
            $DISCORD_WEBHOOK
        continue-on-error: true