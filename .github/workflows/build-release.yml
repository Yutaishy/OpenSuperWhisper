name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.4.0)'
        required: true
        default: 'v0.4.0'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            executable_name: OpenSuperWhisper.exe
            artifact_name: OpenSuperWhisper-Windows
          - os: ubuntu-latest
            executable_name: OpenSuperWhisper
            artifact_name: OpenSuperWhisper-Linux
          - os: macos-latest
            executable_name: OpenSuperWhisper
            artifact_name: OpenSuperWhisper-macOS

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-pyaudio

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Debug - Check installed packages
      run: |
        pip list
        python -c "import OpenSuperWhisper; print('OpenSuperWhisper import successful')"
        python -c "import PySide6; print('PySide6 import successful')"

    # Skip tests for now to focus on build
    # - name: Run tests
    #   run: |
    #     pytest tests/ -v

    - name: Test run_app.py import
      run: |
        python -c "from OpenSuperWhisper.ui_mainwindow import MainWindow; print('MainWindow import successful')"
    
    - name: Create PyInstaller spec file
      run: |
        python -c "
        import PyInstaller.__main__
        PyInstaller.__main__.run([
            '--name=${{ matrix.executable_name }}',
            '--onefile',
            '--windowed',
            '--collect-all=OpenSuperWhisper',
            '--collect-all=PySide6',
            '--hidden-import=OpenSuperWhisper',
            '--hidden-import=OpenSuperWhisper.ui_mainwindow',
            '--hidden-import=OpenSuperWhisper.asr_api',
            '--hidden-import=OpenSuperWhisper.formatter_api',
            '--hidden-import=OpenSuperWhisper.config',
            '--hidden-import=OpenSuperWhisper.logger',
            '--hidden-import=PySide6.QtCore',
            '--hidden-import=PySide6.QtGui',
            '--hidden-import=PySide6.QtWidgets',
            '--distpath=dist',
            'run_app.py'
        ])
        "

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/${{ matrix.executable_name }}
        retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        release_name: OpenSuperWhisper ${{ github.event.inputs.version || github.ref_name }}
        body: |
          ## ðŸŽ¤ OpenSuperWhisper Release ${{ github.event.inputs.version || github.ref_name }}
          
          ### âœ¨ Features
          - Two-stage voice transcription pipeline (Whisper â†’ GPT)
          - Advanced preset management system
          - Global hotkey support (Ctrl+Space)
          - Automatic clipboard integration
          - Professional dark theme UI
          
          ### ðŸ“¦ Downloads
          Choose the appropriate version for your operating system:
          - **Windows**: OpenSuperWhisper.exe
          - **macOS**: OpenSuperWhisper (macOS)
          - **Linux**: OpenSuperWhisper (Linux)
          
          ### ðŸ”§ Requirements
          - OpenAI API key required
          - Internet connection for transcription and formatting
          
          ### ðŸ“š Documentation
          See README.md for complete setup and usage instructions.
        draft: false
        prerelease: false

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./OpenSuperWhisper-Windows/OpenSuperWhisper.exe
        asset_name: OpenSuperWhisper-Windows.exe
        asset_content_type: application/octet-stream

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./OpenSuperWhisper-macOS/OpenSuperWhisper
        asset_name: OpenSuperWhisper-macOS
        asset_content_type: application/octet-stream

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./OpenSuperWhisper-Linux/OpenSuperWhisper
        asset_name: OpenSuperWhisper-Linux
        asset_content_type: application/octet-stream