name: Build and Release

# Triggered for testing GitHub Actions

on:
  push:
    tags:
      - 'v*'
    branches:
      - main  # Add push to main for testing
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.4.0)'
        required: false
        default: 'v0.4.0'

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            executable_name: OpenSuperWhisper
            artifact_name: OpenSuperWhisper-Windows
          - os: ubuntu-latest
            executable_name: OpenSuperWhisper
            artifact_name: OpenSuperWhisper-Linux
          - os: macos-latest
            executable_name: OpenSuperWhisper
            artifact_name: OpenSuperWhisper-macOS

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: |
          pyproject.toml
          requirements.txt

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-pyaudio libasound2-dev xvfb libegl1-mesa-dev libgl1-mesa-dri
        # Start virtual X server for Qt applications
        sudo Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        export QT_QPA_PLATFORM=offscreen
        export DISPLAY=:99

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio

    - name: Install core dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        echo "=== System Info ==="
        python -c "import sys; print(f'Python: {sys.version}'); import platform; print(f'Platform: {platform.platform()}')"
        echo "=== Installing PySide6 (this may take several minutes) ==="
        # Set environment variables for memory optimization
        export PIP_NO_WARN_SCRIPT_LOCATION=1
        export PIP_DISABLE_PIP_VERSION_CHECK=1
        # Use system timeout and retry mechanism for PySide6
        pip install --timeout 1200 --retries 3 --no-cache-dir PySide6 || pip install --timeout 1800 --no-cache-dir --force-reinstall PySide6
        echo "=== Installing other core dependencies ==="
        pip install --timeout 600 --no-cache-dir numpy openai sounddevice pynput PyYAML cryptography Pillow
      timeout-minutes: 25

    - name: Install remaining dependencies
      run: |
        echo "=== Installing development dependencies including PyInstaller ==="
        pip install -e ".[dev]" --timeout 900
        echo "=== Verifying PyInstaller installation ==="
        pip show pyinstaller
        pyinstaller --version
      timeout-minutes: 8
    
    - name: Debug - Check installed packages
      shell: bash
      run: |
        echo "=== System Resources ==="
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          echo "Windows environment - skipping df/free commands"
        else
          df -h
          free -h || echo "free command not available"
        fi
        echo "=== Python Environment ==="
        pip list
        pip check  # Check for dependency conflicts
        echo "=== Import Testing ==="
        python -c "import OpenSuperWhisper; print('OpenSuperWhisper import successful')"
        python -c "import PySide6; print('PySide6 import successful')"
        python -c "import cryptography; print('cryptography import successful')"

    - name: Run tests
      run: |
        echo "Tests directory has been archived for release - skipping tests"
        # pytest tests/ -v --tb=short
      continue-on-error: true  # Don't fail build if tests fail
      env:
        QT_QPA_PLATFORM: ${{ matrix.os == 'ubuntu-latest' && 'offscreen' || '' }}

    - name: Test run_app.py import
      run: |
        python -c "from OpenSuperWhisper.ui_mainwindow import MainWindow; print('MainWindow import successful')"
      env:
        QT_QPA_PLATFORM: ${{ matrix.os == 'ubuntu-latest' && 'offscreen' || '' }}
        DISPLAY: ":99"
        # Prevent OpenAI API calls during import testing
        OPENAI_API_KEY: "test-key-do-not-use"
    
    - name: Build with PyInstaller
      shell: bash
      run: |
        # Add debug info for macOS
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          echo "=== macOS Build Environment ==="
          echo "Architecture: $(uname -m)"
          echo "macOS Version: $(sw_vers -productVersion)"
          echo "Python Location: $(which python)"
          echo "PyInstaller Location: $(which pyinstaller)"
          # Disable code signing for CI builds
          export PYINSTALLER_COMPILE_BOOTLOADER=1
          export MACOSX_DEPLOYMENT_TARGET=10.15
        fi
        
        # Retry PyInstaller build up to 2 times on failure
        for i in {1..2}; do
          echo "Build attempt $i"
          if python build_executable.py "${{ matrix.executable_name }}"; then
            echo "Build successful on attempt $i"
            break
          elif [ $i -eq 2 ]; then
            echo "Build failed after 2 attempts"
            # Show more detailed error info
            echo "=== Last 100 lines of build log ==="
            if [ -f "build/OpenSuperWhisper/warn-OpenSuperWhisper.txt" ]; then
              tail -100 "build/OpenSuperWhisper/warn-OpenSuperWhisper.txt" || true
            fi
            exit 1
          else
            echo "Build failed, retrying..."
            sleep 30
            # Clean up any partial builds
            rm -rf build/ dist/ *.spec
          fi
        done
      timeout-minutes: 30
      env:
        QT_QPA_PLATFORM: ${{ matrix.os == 'ubuntu-latest' && 'offscreen' || '' }}
        CI: true

    - name: Inject macOS Info.plist permissions (optional)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # Detect .app bundle if present (PyInstaller on macOS often outputs .app in onedir)
        APP_PATH=""
        if [ -d "dist/${{ matrix.executable_name }}.app" ]; then
          APP_PATH="dist/${{ matrix.executable_name }}.app"
        elif [ -d "dist/${{ matrix.executable_name }}/${{ matrix.executable_name }}.app" ]; then
          APP_PATH="dist/${{ matrix.executable_name }}/${{ matrix.executable_name }}.app"
        fi

        if [ -n "$APP_PATH" ]; then
          INFO_PLIST="$APP_PATH/Contents/Info.plist"
          echo "Modifying Info.plist at: $INFO_PLIST"
          /usr/libexec/PlistBuddy -c "Add :NSMicrophoneUsageDescription string OpenSuperWhisper requires microphone access to record audio for transcription." "$INFO_PLIST" || \
          /usr/libexec/PlistBuddy -c "Set :NSMicrophoneUsageDescription OpenSuperWhisper requires microphone access to record audio for transcription." "$INFO_PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :NSAppleEventsUsageDescription string OpenSuperWhisper may request limited accessibility features for hotkeys." "$INFO_PLIST" || \
          /usr/libexec/PlistBuddy -c "Set :NSAppleEventsUsageDescription OpenSuperWhisper may request limited accessibility features for hotkeys." "$INFO_PLIST" || true
          plutil -p "$INFO_PLIST"
        else
          echo "No .app bundle detected; skipping Info.plist injection"
        fi

    - name: Codesign Windows executable (optional)
      if: matrix.os == 'windows-latest' && secrets.WINDOWS_PFX_BASE64 && secrets.WINDOWS_PFX_PASSWORD
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        $pfxPath = "$env:RUNNER_TEMP\codesign.pfx"
        [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String("${{ secrets.WINDOWS_PFX_BASE64 }}"))
        $exePath = "dist\${{ matrix.executable_name }}\${{ matrix.executable_name }}.exe"
        if (!(Test-Path $exePath)) { throw "Executable not found: $exePath" }
        $signtool = "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\signtool.exe"
        if (!(Test-Path $signtool)) { $signtool = "signtool.exe" }
        & "$signtool" sign /f "$pfxPath" /p "${{ secrets.WINDOWS_PFX_PASSWORD }}" /tr "http://timestamp.digicert.com" /td SHA256 /fd SHA256 "$exePath"
        Write-Host "Windows executable signed."

    - name: Codesign macOS app (optional)
      if: matrix.os == 'macos-latest' && (secrets.MACOS_CERT_BASE64 && secrets.MACOS_CERT_PASSWORD && secrets.MACOS_SIGNING_IDENTITY)
      shell: bash
      run: |
        set -euo pipefail
        APP_PATH=""
        if [ -d "dist/${{ matrix.executable_name }}.app" ]; then
          APP_PATH="dist/${{ matrix.executable_name }}.app"
        elif [ -d "dist/${{ matrix.executable_name }}/${{ matrix.executable_name }}.app" ]; then
          APP_PATH="dist/${{ matrix.executable_name }}/${{ matrix.executable_name }}.app"
        fi

        if [ -z "$APP_PATH" ]; then
          echo "No .app bundle detected; skipping codesign"
          exit 0
        fi

        KEYCHAIN="$RUNNER_TEMP/osw.keychain-db"
        echo "Creating temporary keychain"
        security create-keychain -p temp "$KEYCHAIN"
        security set-keychain-settings -lut 21600 "$KEYCHAIN"
        security unlock-keychain -p temp "$KEYCHAIN"
        echo "Importing certificate"
        echo "${{ secrets.MACOS_CERT_BASE64 }}" | base64 --decode > "$RUNNER_TEMP/cert.p12"
        security import "$RUNNER_TEMP/cert.p12" -k "$KEYCHAIN" -P "${{ secrets.MACOS_CERT_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/security
        security list-keychains -d user -s "$KEYCHAIN" $(security list-keychains -d user | sed 's/\"//g')
        security find-identity -v -p codesigning

        echo "Signing app bundle: $APP_PATH"
        codesign --deep --force --options runtime --timestamp \
          --sign "${{ secrets.MACOS_SIGNING_IDENTITY }}" "$APP_PATH"
        codesign --verify --deep --strict --verbose=2 "$APP_PATH"

    - name: Notarize macOS app (optional)
      if: matrix.os == 'macos-latest' && (secrets.MACOS_NOTARY_APPLE_ID && secrets.MACOS_NOTARY_TEAM_ID && secrets.MACOS_NOTARY_PASSWORD)
      shell: bash
      run: |
        set -euo pipefail
        APP_PATH=""
        if [ -d "dist/${{ matrix.executable_name }}.app" ]; then
          APP_PATH="dist/${{ matrix.executable_name }}.app"
        elif [ -d "dist/${{ matrix.executable_name }}/${{ matrix.executable_name }}.app" ]; then
          APP_PATH="dist/${{ matrix.executable_name }}/${{ matrix.executable_name }}.app"
        fi
        if [ -z "$APP_PATH" ]; then
          echo "No .app bundle to notarize; skipping"
          exit 0
        fi
        ZIP_PATH="$RUNNER_TEMP/${{ matrix.executable_name }}.zip"
        /usr/bin/ditto -c -k --keepParent "$APP_PATH" "$ZIP_PATH"
        echo "Submitting for notarization"
        xcrun notarytool submit "$ZIP_PATH" \
          --apple-id "${{ secrets.MACOS_NOTARY_APPLE_ID }}" \
          --team-id "${{ secrets.MACOS_NOTARY_TEAM_ID }}" \
          --password "${{ secrets.MACOS_NOTARY_PASSWORD }}" \
          --wait
        echo "Stapling ticket"
        xcrun stapler staple -v "$APP_PATH" || true
    
    - name: Smoke test executable (non-Windows)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        if [ -d "dist/${{ matrix.executable_name }}" ]; then
          EXEC_PATH="dist/${{ matrix.executable_name }}/${{ matrix.executable_name }}"
          chmod +x "$EXEC_PATH"
          echo "Running smoke test: $EXEC_PATH --version"
          "$EXEC_PATH" --version || (echo "Smoke test failed" && exit 1)
        else
          echo "Build output directory not found"
          exit 1
        fi
      env:
        QT_QPA_PLATFORM: ${{ matrix.os == 'ubuntu-latest' && 'offscreen' || '' }}
        DISPLAY: ":99"
        
    - name: Smoke test executable (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $exePath = "dist\\${{ matrix.executable_name }}\\${{ matrix.executable_name }}.exe"
        if (!(Test-Path $exePath)) { Write-Error "Executable not found: $exePath"; exit 1 }
        $out = & $exePath --version
        Write-Host "Output: $out"
        if ($out -notmatch "OpenSuperWhisper v") { Write-Error "Version output not found"; exit 1 }
      timeout-minutes: 2
    
    - name: Verify build output and create distribution archive
      shell: bash
      run: |
        ls -la dist/
        
        # macOS: Prefer .app bundle if exists; otherwise use onedir folder
        TARGET_DIR="dist/${{ matrix.executable_name }}"
        MAC_APP="dist/${{ matrix.executable_name }}.app"
        if [[ "${{ matrix.os }}" == "macos-latest" && -d "$MAC_APP" ]]; then
          echo "Detected macOS app bundle: $MAC_APP"
          /usr/bin/ditto -c -k --keepParent "$MAC_APP" "dist/OpenSuperWhisper.zip"
        else
          # Check for onedir build (all platforms now use onedir mode)
          if [ -d "$TARGET_DIR" ]; then
            echo "Found onedir build: $TARGET_DIR/"
            ls -la "$TARGET_DIR/"
            
            # Windows executable has .exe extension, Unix doesn't
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              EXEC_PATH="$TARGET_DIR/${{ matrix.executable_name }}.exe"
            else
              EXEC_PATH="$TARGET_DIR/${{ matrix.executable_name }}"
            fi
            
            if [ -f "$EXEC_PATH" ]; then
              echo "Found executable: $EXEC_PATH"
              size=$(stat -c%s "$EXEC_PATH" 2>/dev/null || stat -f%z "$EXEC_PATH" 2>/dev/null || echo "0")
              echo "Executable size: $size bytes"
              
              # Set execution permissions on Unix systems
              if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
                chmod +x "$EXEC_PATH"
                echo "Set execution permissions"
              fi
            else
              echo "Error: Main executable not found at $EXEC_PATH"
              exit 1
            fi
          else
            echo "Error: No build output found!"
            exit 1
          fi
          
          # Create ZIP archive for distribution
          cd dist/
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            powershell Compress-Archive -Path "${{ matrix.executable_name }}" -DestinationPath "OpenSuperWhisper.zip"
          else
            zip -r "OpenSuperWhisper.zip" "${{ matrix.executable_name }}/"
          fi
        fi
        echo "Created distribution archive: OpenSuperWhisper.zip"
        ls -la dist/*.zip 2>/dev/null || ls -la *.zip
        echo "Build completed successfully"

    - name: Generate SHA256 checksum
      shell: bash
      run: |
        cd dist/
        shasum -a 256 OpenSuperWhisper.zip > OpenSuperWhisper.zip.sha256 || sha256sum OpenSuperWhisper.zip > OpenSuperWhisper.zip.sha256
        cat OpenSuperWhisper.zip.sha256

    - name: Smoke test executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        EXEC_PATH="dist/${{ matrix.executable_name }}/${{ matrix.executable_name }}"
        [ -f "$EXEC_PATH" ] || { echo "Missing $EXEC_PATH"; exit 1; }
        out="$($EXEC_PATH --version)" || true
        echo "Output: $out"
        echo "$out" | grep -q "OpenSuperWhisper v" || { echo "Version output not found"; exit 1; }
      timeout-minutes: 2

    - name: Smoke test executable (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        EXEC_PATH="dist/${{ matrix.executable_name }}/${{ matrix.executable_name }}"
        [ -f "$EXEC_PATH" ] || { echo "Missing $EXEC_PATH"; exit 1; }
        out="$($EXEC_PATH --version)" || true
        echo "Output: $out"
        echo "$out" | grep -q "OpenSuperWhisper v" || { echo "Version output not found"; exit 1; }
      timeout-minutes: 2

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/OpenSuperWhisper.zip
          dist/OpenSuperWhisper.zip.sha256
        retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    if: (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch') && always()
    # Continue even if some build jobs failed, as long as we have some artifacts
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Reorganize artifacts for release
      run: |
        echo "=== Current directory structure ==="
        find . -type f -name "OpenSuperWhisper*" | head -20
        ls -la
        
        echo "=== Reorganizing ZIP artifacts ==="
        # Create directory structure expected by release action
        mkdir -p release-files
        
        # Copy Windows ZIP (note: Windows now creates OpenSuperWhisper.zip with onedir mode)
        if [ -f "OpenSuperWhisper-Windows/OpenSuperWhisper.zip" ]; then
          cp "OpenSuperWhisper-Windows/OpenSuperWhisper.zip" "release-files/OpenSuperWhisper-Windows.zip"
          echo "Windows ZIP found and copied"
        else
          echo "ERROR: Windows ZIP not found"
          find . -name "*.zip" -type f
        fi
        
        # Copy macOS ZIP  
        if [ -f "OpenSuperWhisper-macOS/OpenSuperWhisper.zip" ]; then
          cp "OpenSuperWhisper-macOS/OpenSuperWhisper.zip" "release-files/OpenSuperWhisper-macOS.zip"
          echo "macOS ZIP found and copied"
        else
          echo "ERROR: macOS ZIP not found"
          find . -name "*macOS*.zip" -type f
        fi
        
        # Copy Linux ZIP
        if [ -f "OpenSuperWhisper-Linux/OpenSuperWhisper.zip" ]; then
          cp "OpenSuperWhisper-Linux/OpenSuperWhisper.zip" "release-files/OpenSuperWhisper-Linux.zip"
          echo "Linux ZIP found and copied"
        else
          echo "ERROR: Linux ZIP not found"
          find . -name "*Linux*.zip" -type f
        fi
        
        echo "=== Final release files ==="
        ls -la release-files/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: OpenSuperWhisper ${{ github.event.inputs.version || github.ref_name }}
        body: |
          ## 🎤 OpenSuperWhisper Release ${{ github.event.inputs.version || github.ref_name }}
          
          ### ✨ Features
          - Two-stage voice transcription pipeline (Whisper → GPT)
          - Advanced preset management system
          - Global hotkey support (Ctrl+Space)
          - Automatic clipboard integration
          - Professional dark theme UI
          
          ### 🔧 Requirements
          - OpenAI API key required
          - Internet connection for transcription and formatting
          
          ### 📚 Documentation
          See README.md for complete setup and usage instructions.
        files: |
          release-files/OpenSuperWhisper-Windows.zip
          release-files/OpenSuperWhisper-macOS.zip
          release-files/OpenSuperWhisper-Linux.zip
        draft: false
        prerelease: false