name: Docker Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/opensuperwhisper

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev libsndfile1-dev ffmpeg
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docker.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        # Install test-specific dependencies
        pip install fastapi[all] httpx
        
        # Basic import test
        python -c "from OpenSuperWhisper import web_api; print('‚úÖ Web API imports successfully')"
        
        # Test API endpoints (without OpenAI API key)
        python -c "
        from fastapi.testclient import TestClient
        from OpenSuperWhisper.web_api import app
        
        client = TestClient(app)
        response = client.get('/')
        assert response.status_code == 200
        assert 'healthy' in response.json()['status']
        print('‚úÖ Health check endpoint works')
        "

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        echo "üß™ Testing Docker image..."
        
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Test image runs without errors
        timeout 30s docker run --rm \
          -e OPENAI_API_KEY=dummy-key-for-testing \
          -p 8000:8000 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest &
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/ || exit 1
        
        echo "‚úÖ Docker image test passed!"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    runs-on: ubuntu-latest
    needs: [test, build-and-push, security-scan]
    if: always() && github.event_name != 'pull_request'

    steps:
    - name: Notify success
      if: needs.build-and-push.result == 'success'
      run: |
        echo "üéâ Docker image successfully built and pushed!"
        echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è  Tags: latest, ${{ github.ref_name }}"
        echo ""
        echo "üöÄ To run the container:"
        echo "docker run -p 8000:8000 -e OPENAI_API_KEY=your_key_here ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

    - name: Notify failure
      if: needs.build-and-push.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "‚ùå Build failed!"
        echo "Please check the logs and fix the issues."
        exit 1